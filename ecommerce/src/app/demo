

// import React, { useState, useEffect } from 'react';
// import axios from 'axios';

// const HomePage = () => {
//   // State for categories, filters, and products
//   const [categories, setCategories] = useState([]);
//   const [products, setProducts] = useState([]);
//   const [filters, setFilters] = useState({
//     category: '',
//     minPrice: 0,
//     maxPrice: 1000,
//     search: '',
//     sortBy: 'price',
//     order: 'desc',
//   });
  
//   const [priceRange, setPriceRange] = useState({ min: 0, max: 1000 });

//   // Fetch categories (You can replace this with an API if needed)
//   useEffect(() => {
//     const fetchCategories = async () => {
//       try {
//         // Assuming you have a predefined list of categories
//         const response = await axios.get('http://localhost:8000/api/product-filters'); // Add endpoint if available
//         setCategories(['Electronics', 'Clothing', 'Books', 'Home & Kitchen']); // Replace with response data if dynamic
//       } catch (error) {
//         console.error('Error fetching categories:', error);
//       }
//     };
    
//     fetchCategories();
//   }, []);

//   // Fetch filtered products based on filters
//   const fetchProducts = async () => {
//     try {
//       const { category, minPrice, maxPrice, search, sortBy, order } = filters;
//       const response = await axios.get('http://localhost:8000/api/product-filters', {
//         params: {
//           category,
//           minPrice,
//           maxPrice,
//           search,
//           sortBy,
//           order,
//         },
//       });
//       setProducts(response.data); // Assuming response contains the product list
//     } catch (error) {
//       console.error('Error fetching products:', error);
//     }
//   };

//   // Call fetchProducts when filters change
//   useEffect(() => {
//     fetchProducts();
//   }, [filters]);

//   // Handle filter change
//   const handleFilterChange = (e) => {
//     setFilters({
//       ...filters,
//       [e.target.name]: e.target.value,
//     });
//   };

//   // Handle price range change
//   const handlePriceRangeChange = (min, max) => {
//     setFilters({
//       ...filters,
//       minPrice: min,
//       maxPrice: max,
//     });
//   };

//   return (
//     <div className="container mx-auto p-4">
//       <div className="flex justify-between items-center mb-4">
//         <h1 className="text-3xl font-bold">Products</h1>
//         <div className="space-x-4">
//           {/* Category Filter */}
//           <select
//             name="category"
//             value={filters.category}
//             onChange={handleFilterChange}
//             className="p-2 border border-gray-300 rounded"
//           >
//             <option value="">All Categories</option>
//             {categories.map((category) => (
//               <option key={category} value={category}>
//                 {category}
//               </option>
//             ))}
//           </select>

//           {/* Price Range Filter */}
//           <div className="flex items-center space-x-2">
//             <input
//               type="number"
//               value={filters.minPrice}
//               onChange={(e) => handlePriceRangeChange(e.target.value, filters.maxPrice)}
//               className="p-2 border border-gray-300 rounded"
//               placeholder="Min Price"
//             />
//             <input
//               type="number"
//               value={filters.maxPrice}
//               onChange={(e) => handlePriceRangeChange(filters.minPrice, e.target.value)}
//               className="p-2 border border-gray-300 rounded"
//               placeholder="Max Price"
//             />
//           </div>

//           {/* Search Filter */}
//           <input
//             type="text"
//             name="search"
//             value={filters.search}
//             onChange={handleFilterChange}
//             className="p-2 border border-gray-300 rounded"
//             placeholder="Search"
//           />

//           {/* Sort By Filter */}
//           <select
//             name="sortBy"
//             value={filters.sortBy}
//             onChange={handleFilterChange}
//             className="p-2 border border-gray-300 rounded"
//           >
//             <option value="price">Price</option>
//             <option value="createdAt">New Arrivals</option>
//           </select>

//           {/* Order Filter */}
//           <select
//             name="order"
//             value={filters.order}
//             onChange={handleFilterChange}
//             className="p-2 border border-gray-300 rounded"
//           >
//             <option value="asc">Ascending</option>
//             <option value="desc">Descending</option>
//           </select>
//         </div>
//       </div>

//       {/* Display Products */}
//       <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
//         {products.length === 0 ? (
//           <div>No products found.</div>
//         ) : (
//           products.map((product) => (
//             <div key={product.id} className="border p-4 rounded-lg shadow-lg">
//               <img src={product.image} alt={product.name} className="w-full h-48 object-cover mb-4" />
//               <h3 className="text-xl font-semibold">{product.name}</h3>
//               <p className="text-gray-600">{product.description}</p>
//               <div className="mt-2">
//                 <span className="text-lg font-bold">${product.price}</span>
//               </div>
//             </div>
//           ))
//         )}
//       </div>
//     </div>
//   );
// };

// export default HomePage;





